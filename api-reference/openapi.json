{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/search": {
      "get": {
        "operationId": "SearchController_getAll",
        "summary": "Search",
        "parameters": [
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "SIMPLE"
              ],
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me": {
      "get": {
        "operationId": "MeController_me",
        "summary": "Retrieve user, accesses, roles and more.",
        "description": "\n    ROLES: null\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MeController_changeMeDetails",
        "summary": "Update user profile.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: false\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/notifications": {
      "get": {
        "operationId": "MeController_notifications",
        "summary": "Fetch notifications.",
        "description": "\n    ROLES: null\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/notifications/token": {
      "post": {
        "operationId": "MeController_updateNotificationToken",
        "summary": "Add new notification token.",
        "description": "\n    ROLES: null\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/notifications/read": {
      "post": {
        "operationId": "MeController_notificationsMark",
        "summary": "Mark notifications as read.",
        "description": "\n    ROLES: null\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/notifications/delete": {
      "post": {
        "operationId": "MeController_notificationsMarkDeleted",
        "summary": "Mark notifications as deleted.",
        "description": "\n    ROLES: null\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/time": {
      "get": {
        "operationId": "MeController_time",
        "summary": "Show server time.",
        "description": "\n    ROLES: null\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/uploadAvatar": {
      "post": {
        "operationId": "MeController_myUserUploadImage",
        "summary": "Upload avatar.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: false\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Avatar",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded."
          },
          "400": {
            "description": "Bad request missing either userId or file."
          },
          "502": {
            "description": "Bad storage server configuration."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/clearAvatar": {
      "post": {
        "operationId": "MeController_clearUserAvatar",
        "summary": "Clear avatar.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: false\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/keys": {
      "get": {
        "operationId": "MeController_getKeys",
        "summary": "Get your API keys.",
        "description": "\n    ROLES: ME_KEY_MANAGER\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/key/{key}": {
      "get": {
        "operationId": "MeController_getKey",
        "summary": "Get an API key.",
        "description": "\n    ROLES: ME_KEY_MANAGER\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/key": {
      "post": {
        "operationId": "MeController_createKey",
        "summary": "Generate an API key.",
        "description": "\n    ROLES: ME_KEY_MANAGER\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/key/{key}/update": {
      "post": {
        "operationId": "MeController_updateKey",
        "summary": "Update an API key.",
        "description": "\n    ROLES: ME_KEY_MANAGER\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/me/key/{key}/delete": {
      "post": {
        "operationId": "MeController_revokeKey",
        "summary": "Delete an API key.",
        "description": "\n    ROLES: ME_KEY_MANAGER\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeRequiredDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Me"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts": {
      "get": {
        "operationId": "UsersController_getAll",
        "summary": "Get all users.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/stats": {
      "get": {
        "operationId": "UsersController_stats",
        "summary": "Get stats of users.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}": {
      "get": {
        "operationId": "UsersController_getById",
        "summary": "Get an account.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "Provide userId who should be deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UsersController_updateUser",
        "summary": "Update an account.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UsersController_deleteUser",
        "summary": "Delete an account.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/createUserAccount": {
      "post": {
        "operationId": "UsersController_createUser",
        "summary": "Create an account.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/createInternalAccount": {
      "post": {
        "operationId": "UsersController_createInternalAccount",
        "summary": "Create internal account.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/createServiceAccount": {
      "post": {
        "operationId": "UsersController_createServiceAccount",
        "summary": "Create a service account.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/activate": {
      "post": {
        "operationId": "UsersController_activateUser",
        "summary": "Activate an account.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/disable": {
      "post": {
        "operationId": "UsersController_disableUser",
        "summary": "Disable an account.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/enablePlatformAccess": {
      "post": {
        "operationId": "UsersController_enablePlatformAccess",
        "summary": "Enable platform access for user.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/disablePlatformAccess": {
      "post": {
        "operationId": "UsersController_disablePlatformAccess",
        "summary": "Disable platform access for user.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/restore": {
      "post": {
        "operationId": "UsersController_restoreUser",
        "summary": "Restore an account.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/keys": {
      "get": {
        "operationId": "UsersController_getKeys",
        "summary": "Get a API keys.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UsersController_createKey",
        "summary": "Create an API key.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/keys/{key}": {
      "get": {
        "operationId": "UsersController_getKey",
        "summary": "Get an API key.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/keys/{key}/update": {
      "post": {
        "operationId": "UsersController_updateKey",
        "summary": "Update an API key.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{userId}/keys/{key}/delete": {
      "post": {
        "operationId": "UsersController_revokeKey",
        "summary": "Delete an API key.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeRequiredDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{id}/version": {
      "get": {
        "operationId": "UsersController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/accounts/{id}/version/{version}": {
      "get": {
        "operationId": "UsersController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints": {
      "get": {
        "operationId": "EndpointController_getTemplates",
        "summary": "Get endpoints.",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "EndpointController_createTemplate",
        "summary": "Create endpoint.",
        "description": "\n    ROLES: ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/stats": {
      "get": {
        "operationId": "EndpointController_endpointStats",
        "summary": "Get endpoint stats (cached in 5 min intervals).",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{endpointId}": {
      "get": {
        "operationId": "EndpointController_getOneTemplate",
        "summary": "Get endpoint.",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "endpointId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "EndpointController_update",
        "summary": "Update endpoint.",
        "description": "\n    ROLES: ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "endpointId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEndpointRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/delete": {
      "post": {
        "operationId": "EndpointController_deleteTemplates",
        "summary": "Delete template.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{endpointId}/activate": {
      "post": {
        "operationId": "EndpointController_activateTemplate",
        "summary": "Activate endpoint.",
        "description": "\n    ROLES: ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "endpointId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{endpointId}/disable": {
      "post": {
        "operationId": "EndpointController_disableTemplate",
        "summary": "Disable endpoint.",
        "description": "\n    ROLES: ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "endpointId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{endpointId}/restore": {
      "post": {
        "operationId": "EndpointController_restore",
        "summary": "Restore deleted endpoint.",
        "description": "\n    ROLES: ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "endpointId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{endpointId}/stats": {
      "post": {
        "operationId": "EndpointController_apiStats",
        "summary": "Get stats from API executions.",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "endpointId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APISingleStatsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/validate": {
      "post": {
        "operationId": "EndpointController_verify",
        "summary": "Validate applicable endpoint for given criteria.",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointValidateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{id}/version": {
      "get": {
        "operationId": "EndpointController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/endpoints/{id}/version/{version}": {
      "get": {
        "operationId": "EndpointController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: ENDPOINT_READ,ENDPOINT_WRITE,ENDPOINT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Endpoints"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component": {
      "get": {
        "operationId": "ComponentController_getAll",
        "summary": "Get components (all active and not).",
        "description": "\n    ROLES: COMPONENT_READ,COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ComponentController_createComponents",
        "summary": "Create component.",
        "description": "\n    ROLES: COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComponentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{componentId}": {
      "get": {
        "operationId": "ComponentController_getById",
        "summary": "Get component by id.",
        "description": "\n    ROLES: COMPONENT_READ,COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "description": "Provide roleId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ComponentController_updateComponents",
        "summary": "Update component.",
        "description": "\n    ROLES: COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComponentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ComponentController_removeComponents",
        "summary": "Delete component.",
        "description": "\n    ROLES: COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{componentId}/save": {
      "post": {
        "operationId": "ComponentController_createComponentsDetails",
        "summary": "Save component.",
        "description": "\n    ROLES: COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentElementsDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{componentId}/activate": {
      "post": {
        "operationId": "ComponentController_activate",
        "summary": "Activate component.",
        "description": "\n    ROLES: COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{componentId}/disable": {
      "post": {
        "operationId": "ComponentController_disable",
        "summary": "Disable component.",
        "description": "\n    ROLES: COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{componentId}/restore": {
      "post": {
        "operationId": "ComponentController_restore",
        "summary": "Restore deleted component.",
        "description": "\n    ROLES: COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "componentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{id}/version": {
      "get": {
        "operationId": "ComponentController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: COMPONENT_READ,COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/component/{id}/version/{version}": {
      "get": {
        "operationId": "ComponentController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: COMPONENT_READ,COMPONENT_WRITE,COMPONENT_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Components"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups": {
      "get": {
        "operationId": "RoleGroupsController_getAll",
        "summary": "Get a role groups.",
        "description": "\n    ROLES: USER_READ\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "RoleGroupsController_postGroup",
        "summary": "Create a role group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{roleGroupId}": {
      "get": {
        "operationId": "RoleGroupsController_getById",
        "summary": "Get a role group.",
        "description": "\n    ROLES: USER_READ\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "description": "Provide roleId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "RoleGroupsController_updateGroup",
        "summary": "Update a role group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "204": {
            "description": "Not found."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "RoleGroupsController_removeGroup",
        "summary": "Delete a role group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "204": {
            "description": "Not found."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{roleGroupId}/userAdd": {
      "post": {
        "operationId": "RoleGroupsController_userAdd",
        "summary": "Add user to a group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{roleGroupId}/userDelete": {
      "post": {
        "operationId": "RoleGroupsController_removeUser",
        "summary": "Remove user from a group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{roleGroupId}/roleAdd": {
      "post": {
        "operationId": "RoleGroupsController_roleAdd",
        "summary": "Add role to a group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{roleGroupId}/roleDelete": {
      "post": {
        "operationId": "RoleGroupsController_roleRemove",
        "summary": "Remove role from a group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{roleGroupId}/restore": {
      "post": {
        "operationId": "RoleGroupsController_restore",
        "summary": "Restore removed group.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleGroupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{id}/version": {
      "get": {
        "operationId": "RoleGroupsController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/role-groups/{id}/version/{version}": {
      "get": {
        "operationId": "RoleGroupsController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Role Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/roles": {
      "get": {
        "operationId": "RolesController_getAll",
        "summary": "Get roles.",
        "description": "\n    ROLES: USER_READ\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/roles/{roleKey}": {
      "get": {
        "operationId": "RolesController_getById",
        "summary": "Get a role.",
        "description": "\n    ROLES: USER_READ\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "roleKey",
            "required": true,
            "in": "path",
            "description": "Provide roleKey.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups": {
      "get": {
        "operationId": "GroupsController_getAll",
        "summary": "Get a groups.",
        "description": "\n    ROLES: USER_READ,USER_ADMIN,USER_WRITE\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "GroupsController_postType",
        "summary": "Create a group.",
        "description": "\n    ROLES: USER_ADMIN,USER_WRITE\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups/{groupId}": {
      "get": {
        "operationId": "GroupsController_getById",
        "summary": "Get a group.",
        "description": "\n    ROLES: USER_READ,USER_ADMIN,USER_WRITE\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Provide roleId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "GroupsController_updateType",
        "summary": "Update a group.",
        "description": "\n    ROLES: USER_ADMIN,USER_WRITE\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "GroupsController_removeGroup",
        "summary": "Delete a group.",
        "description": "\n    ROLES: USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups/{groupId}/userAdd": {
      "post": {
        "operationId": "GroupsController_userAdd",
        "summary": "Add user to a group.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups/{groupId}/userDelete": {
      "post": {
        "operationId": "GroupsController_removeUser",
        "summary": "Remove user from a group.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups/{groupId}/restore": {
      "post": {
        "operationId": "GroupsController_restore",
        "summary": "Restore removed group.",
        "description": "\n    ROLES: USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups/{id}/version": {
      "get": {
        "operationId": "GroupsController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/groups/{id}/version/{version}": {
      "get": {
        "operationId": "GroupsController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: USER_READ,USER_WRITE,USER_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources": {
      "get": {
        "operationId": "ResourcesController_getAll",
        "summary": "Get resources.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ResourcesController_postResource",
        "summary": "Create resource.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}": {
      "get": {
        "operationId": "ResourcesController_getOne",
        "summary": "Get resource.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "Provide resourceId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ResourcesController_updateResource",
        "summary": "Update resource.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ResourcesController_removeResource",
        "summary": "Delete resource.",
        "description": "\n    ROLES: RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/restore": {
      "post": {
        "operationId": "ResourcesController_restoreResource",
        "summary": "Restore deleted resource.",
        "description": "\n    ROLES: RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{id}/version": {
      "get": {
        "operationId": "ResourcesController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{id}/version/{version}": {
      "get": {
        "operationId": "ResourcesController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/allowedFields": {
      "get": {
        "operationId": "ResourcesController_getFields",
        "summary": "Get allowed fields for resource.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "Provide resourceId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/getItems": {
      "get": {
        "operationId": "ResourcesController_getResourceItems",
        "summary": "Get resource items.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "Provide resourceId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ResourcesController_getRequestCount",
        "summary": "Get resource items.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true,\n    CACHE (sec.): 10\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "Provide resourceId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/clone": {
      "post": {
        "operationId": "ResourcesController_cloneResource",
        "summary": "Clone resource.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items",
            "required": false,
            "in": "query",
            "description": "With items.",
            "example": "true",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/activate": {
      "post": {
        "operationId": "ResourcesController_activateResource",
        "summary": "Activate resource.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/disable": {
      "post": {
        "operationId": "ResourcesController_disableResource",
        "summary": "Disable resource.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/createItems": {
      "post": {
        "operationId": "ResourcesController_createResourceItem",
        "summary": "Create resource items.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceItemsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/updateItem": {
      "post": {
        "operationId": "ResourcesController_updateResourceItem",
        "summary": "Update resource item.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleUpdateResourceItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/updateItems": {
      "post": {
        "operationId": "ResourcesController_updateResourceItems",
        "summary": "Update resource items.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceItemsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/deleteItems": {
      "post": {
        "operationId": "ResourcesController_itemDelete",
        "summary": "Delete resource items.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteResourceItemsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/resources/{resourceId}/purgeItems": {
      "post": {
        "operationId": "ResourcesController_itemWipe",
        "summary": "Purge resource items.",
        "description": "\n    ROLES: RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Resources"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/preferences": {
      "get": {
        "operationId": "PreferencesController_getAll",
        "summary": "Get a preferences.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "PreferencesController_postType",
        "summary": "Create a preference.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreferenceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/preferences/{preferenceId}": {
      "get": {
        "operationId": "PreferencesController_getSingle",
        "summary": "Get a single preference with details.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "preferenceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "PreferencesController_updateType",
        "summary": "Update a preference.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "preferenceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePreferenceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/preferences/delete": {
      "post": {
        "operationId": "PreferencesController_removeType",
        "summary": "Delete a preference.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/preferences/{preferenceId}/version": {
      "get": {
        "operationId": "PreferencesController_snapshots",
        "summary": "Get versions.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "preferenceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/preferences/{preferenceId}/version/{version}": {
      "get": {
        "operationId": "PreferencesController_snapshot",
        "summary": "Get version.",
        "description": "\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "preferenceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Preferences"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/mail/templates": {
      "get": {
        "operationId": "MailController_getAll",
        "summary": "Get resources.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MailController_postResource",
        "summary": "Create mail template.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/mail/templates/{messageTemplateId}": {
      "get": {
        "operationId": "MailController_getOne",
        "summary": "Get resource.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "messageTemplateId",
            "required": true,
            "in": "path",
            "description": "Provide messageTemplateId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MailController_updateResource",
        "summary": "Update mail template.",
        "description": "\n    ROLES: RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "messageTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/mail/templates/delete": {
      "post": {
        "operationId": "MailController_deleteTemplates",
        "summary": "Delete mail templates.",
        "description": "\n    ROLES: RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/mail/templates/{messageTemplateId}/restore": {
      "post": {
        "operationId": "MailController_restore",
        "summary": "Restore mail template.",
        "description": "\n    ROLES: RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "messageTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/mail/templates/{id}/version": {
      "get": {
        "operationId": "MailController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/mail/templates/{id}/version/{version}": {
      "get": {
        "operationId": "MailController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: RESOURCE_READ,RESOURCE_WRITE,RESOURCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Mail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets": {
      "get": {
        "operationId": "SecretsController_getAll",
        "summary": "Get secrets.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SecretsController_postSecret",
        "summary": "Create secret.",
        "description": "\n    ROLES: SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecretDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}": {
      "get": {
        "operationId": "SecretsController_getById",
        "summary": "Get secret.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SecretsController_updateSecret",
        "summary": "Update secret.",
        "description": "\n    ROLES: SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecretDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SecretsController_removeSecret",
        "summary": "Delete secret.",
        "description": "\n    ROLES: SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}/data": {
      "get": {
        "operationId": "SecretsController_secretData",
        "summary": "Get secret revisions.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}/create": {
      "post": {
        "operationId": "SecretsController_addSecret",
        "summary": "Create a secret.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecretDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{id}/version": {
      "get": {
        "operationId": "SecretsController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{id}/version/{version}": {
      "get": {
        "operationId": "SecretsController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}/reveal/{secretDataId}": {
      "post": {
        "operationId": "SecretsController_revealSecret",
        "summary": "Reveal secret.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretDataId",
            "required": true,
            "in": "path",
            "description": "Provide secretDataId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}/activate/{secretDataId}": {
      "post": {
        "operationId": "SecretsController_activateSecret",
        "summary": "Activate secret.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretDataId",
            "required": true,
            "in": "path",
            "description": "Provide secretDataId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}/disable/{secretDataId}": {
      "post": {
        "operationId": "SecretsController_disableSecret",
        "summary": "Disable secret.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretDataId",
            "required": true,
            "in": "path",
            "description": "Provide secretDataId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/secrets/{secretId}/destroy/{secretDataId}": {
      "post": {
        "operationId": "SecretsController_revokeSecret",
        "summary": "Destroy secret.",
        "description": "\n    ROLES: SECRET_READ,SECRET_WRITE,SECRET_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "secretId",
            "required": true,
            "in": "path",
            "description": "Provide secretId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretDataId",
            "required": true,
            "in": "path",
            "description": "Provide secretDataId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": [
          "Secrets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema": {
      "get": {
        "operationId": "MetaSchemaController_getAll",
        "summary": "Get all schemas.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MetaSchemaController_postSchema",
        "summary": "Create schemas.",
        "description": "\n    ROLES: SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMetaSchemaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{schemaId}": {
      "get": {
        "operationId": "MetaSchemaController_getById",
        "summary": "Get one schema.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Provide schemaId.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MetaSchemaController_updateSchema",
        "summary": "Update schemas.",
        "description": "\n    ROLES: SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMetaSchemaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "MetaSchemaController_removeSchema",
        "summary": "Remove schemas.",
        "description": "\n    ROLES: SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{schemaId}/restore": {
      "post": {
        "operationId": "MetaSchemaController_restore",
        "summary": "Restore schema.",
        "description": "\n    ROLES: SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{id}/version": {
      "get": {
        "operationId": "MetaSchemaController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{id}/version/{version}": {
      "get": {
        "operationId": "MetaSchemaController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{schemaId}/fields": {
      "get": {
        "operationId": "MetaSchemaController_getFields",
        "summary": "Get fields.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MetaSchemaController_addField",
        "summary": "Add field.",
        "description": "\n    ROLES: SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMetaFieldDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{schemaId}/fields/{metaFieldId}": {
      "get": {
        "operationId": "MetaSchemaController_getField",
        "summary": "Get single field.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metaFieldId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MetaSchemaController_updateField",
        "summary": "Update field.",
        "description": "\n    ROLES: SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metaFieldId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMetaFieldDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "MetaSchemaController_removeField",
        "summary": "Delete field.",
        "description": "\n    ROLES: SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metaFieldId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "path",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{schemaId}/fields/{id}/version": {
      "get": {
        "operationId": "MetaSchemaController_snapshotsFields",
        "summary": "Get versions.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/schema/{schemaId}/fields/{id}/version/{version}": {
      "get": {
        "operationId": "MetaSchemaController_snapshotFields",
        "summary": "Get version.",
        "description": "\n    ROLES: SCHEMA_READ,SCHEMA_WRITE,SCHEMA_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files": {
      "get": {
        "operationId": "FilesController_explorer",
        "summary": "File explorer.",
        "description": "\n    ROLES: FILE_READ,FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "FilesController_create",
        "summary": "File explorer.",
        "description": "\n    ROLES: FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "Path of file found."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{fileId}/download": {
      "post": {
        "operationId": "FilesController_downloadFile",
        "summary": "File download.",
        "description": "\n    ROLES: FILE_READ,FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{fileId}/preview": {
      "post": {
        "operationId": "FilesController_previewFile",
        "summary": "File download.",
        "description": "\n    ROLES: FILE_READ,FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/delete": {
      "post": {
        "operationId": "FilesController_deleteFiles",
        "summary": "File delete.",
        "description": "\n    ROLES: FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}/version": {
      "get": {
        "operationId": "FilesController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: FILE_READ,FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}/version/{version}": {
      "get": {
        "operationId": "FilesController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: FILE_READ,FILE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job": {
      "get": {
        "operationId": "AutomationController_getJobs",
        "summary": "Get jobs.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job/{jobId}": {
      "get": {
        "operationId": "AutomationController_getOneJob",
        "summary": "Get job.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job/{jobId}/logs": {
      "get": {
        "operationId": "AutomationController_getJobLogs",
        "summary": "Get job logs.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job/{jobId}/retry": {
      "post": {
        "operationId": "AutomationController_retryJob",
        "summary": "Retry job.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job/cancel": {
      "post": {
        "operationId": "AutomationController_cancelJobs",
        "summary": "Cancel jobs.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job/delete": {
      "post": {
        "operationId": "AutomationController_deleteJobs",
        "summary": "Delete job.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/job/{jobId}/restore": {
      "post": {
        "operationId": "AutomationController_restoreJob",
        "summary": "Restore job.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template": {
      "get": {
        "operationId": "AutomationController_getTemplates",
        "summary": "Get templates.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AutomationController_createTemplate",
        "summary": "Create templates.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobTemplateRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}": {
      "get": {
        "operationId": "AutomationController_getOneTemplate",
        "summary": "Get template.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AutomationController_update",
        "summary": "Update template.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobTemplate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}/run": {
      "post": {
        "operationId": "AutomationController_runFromTemplate",
        "summary": "Run template.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}/subscribe": {
      "post": {
        "operationId": "AutomationController_subscribe",
        "summary": "Subscribe template.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}/unsubscribe": {
      "post": {
        "operationId": "AutomationController_unsubscribe",
        "summary": "Unsubscribe template.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}/subscribe/{userId}": {
      "post": {
        "operationId": "AutomationController_subscribeUser",
        "summary": "Subscribe template.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}/unsubscribe/{userId}": {
      "post": {
        "operationId": "AutomationController_unsubscribeUser",
        "summary": "Unsubscribe template.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/delete": {
      "post": {
        "operationId": "AutomationController_deleteTemplates",
        "summary": "Delete template.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{jobTemplateId}/restore": {
      "post": {
        "operationId": "AutomationController_restoreTemplate",
        "summary": "Restore template.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "jobTemplateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{id}/version": {
      "get": {
        "operationId": "AutomationController_snapshots",
        "summary": "Get versions.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/template/{id}/version/{version}": {
      "get": {
        "operationId": "AutomationController_snapshot",
        "summary": "Get version.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule": {
      "get": {
        "operationId": "AutomationController_getSchedules",
        "summary": "Schedule get all.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AutomationController_createSchedule",
        "summary": "Schedule create.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{scheduleId}": {
      "get": {
        "operationId": "AutomationController_getSchedule",
        "summary": "Schedule get one.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AutomationController_updateSchedule",
        "summary": "Schedule update.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{scheduleId}/run": {
      "post": {
        "operationId": "AutomationController_runSchedule",
        "summary": "Schedule trigger now.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{scheduleId}/activate": {
      "post": {
        "operationId": "AutomationController_resumeSchedule",
        "summary": "Schedule resume.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{scheduleId}/disable": {
      "post": {
        "operationId": "AutomationController_pauseSchedule",
        "summary": "Schedule pause.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/delete": {
      "post": {
        "operationId": "AutomationController_deleteSchedule",
        "summary": "Schedule delete.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{scheduleId}/restore": {
      "post": {
        "operationId": "AutomationController_restoreSchedule",
        "summary": "Restore deleted schedule.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{id}/version": {
      "get": {
        "operationId": "AutomationController_snapshotsSchedule",
        "summary": "Get versions.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/schedule/{id}/version/{version}": {
      "get": {
        "operationId": "AutomationController_snapshotSchedule",
        "summary": "Get version.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/eventHistory": {
      "get": {
        "operationId": "AutomationController_getEventHistory",
        "summary": "Get event history.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/eventHistory/{eventId}": {
      "get": {
        "operationId": "AutomationController_getEventHistoryDetails",
        "summary": "Get event history detailed.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/eventHistory/delete": {
      "post": {
        "operationId": "AutomationController_deleteEventHistory",
        "summary": "Delete event history.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/eventHistory/{eventId}/restore": {
      "post": {
        "operationId": "AutomationController_restoreEventHistory",
        "summary": "Restore event history.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event": {
      "get": {
        "operationId": "AutomationController_getEvents",
        "summary": "Get events.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AutomationController_createEvent",
        "summary": "Create events.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobEventRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{eventId}": {
      "get": {
        "operationId": "AutomationController_getEventDetails",
        "summary": "Get event.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AutomationController_updateEvent",
        "summary": "Update event.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobEventRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{eventId}/run": {
      "post": {
        "operationId": "AutomationController_runEvent",
        "summary": "Trigger event.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerJobEventRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event run."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{eventId}/activate": {
      "post": {
        "operationId": "AutomationController_activateEvent",
        "summary": "Activate event.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event activated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{eventId}/disable": {
      "post": {
        "operationId": "AutomationController_disableEvent",
        "summary": "Disable event.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event disabled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/delete": {
      "post": {
        "operationId": "AutomationController_deleteEvents",
        "summary": "Delete event.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{eventId}/restore": {
      "post": {
        "operationId": "AutomationController_restoreEvent",
        "summary": "Restore event.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event disabled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{id}/version": {
      "get": {
        "operationId": "AutomationController_snapshotsEvent",
        "summary": "Get versions.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cache",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inverse",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get all possible versions."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/event/{id}/version/{version}": {
      "get": {
        "operationId": "AutomationController_snapshotEvent",
        "summary": "Get version.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Single version snapshot."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/webhook": {
      "get": {
        "operationId": "AutomationController_getWebhooks",
        "summary": "Get webhooks.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AutomationController_createWebhook",
        "summary": "Create webhook.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job scheduled."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/webhook/{webhookId}": {
      "get": {
        "operationId": "AutomationController_getOneWebhook",
        "summary": "Get webhooks.",
        "description": "\n    ROLES: AUTOMATION_READ,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/webhook/cancel": {
      "post": {
        "operationId": "AutomationController_cancelWebhooks",
        "summary": "Cancel webhooks.",
        "description": "\n    ROLES: AUTOMATION_RUNNER,AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/webhook/delete": {
      "post": {
        "operationId": "AutomationController_deleteWebhooks",
        "summary": "Delete webhook.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/automation/webhook/{webhookId}/restore": {
      "post": {
        "operationId": "AutomationController_restoreWebhook",
        "summary": "Get webhooks.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Automation"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assistant/threads": {
      "get": {
        "operationId": "AssistantController_getAllThreads",
        "summary": "Get all threads.",
        "description": "Get all threads.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AssistantController_createThread",
        "summary": "Create thread.",
        "description": "Create a new thread.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Thread created."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assistant/threads/{id}": {
      "get": {
        "operationId": "AssistantController_thread",
        "summary": "Get a thread.",
        "description": "Get a thread by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread deleted."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Thread not found."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AssistantController_deleteThread",
        "summary": "Delete thread.",
        "description": "Delete a thread by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread deleted."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Thread not found."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assistant/threads/{id}/restore": {
      "post": {
        "operationId": "AssistantController_restoreThread",
        "summary": "Restore thread.",
        "description": "Restore a thread by ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread restored."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Thread not found."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assistant/threads/{id}/messages": {
      "get": {
        "operationId": "AssistantController_getThreadMessages",
        "summary": "Get messages of a thread.",
        "description": "Get all messages of a thread by thread ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Thread not found."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AssistantController_sendMessageToThread",
        "summary": "Send message to a thread.",
        "description": "Send a message to a thread by thread ID.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Thread not found."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assistant/threads/{id}/cancel": {
      "post": {
        "operationId": "AssistantController_cancelThread",
        "summary": "Cancel thread.",
        "description": "Cancel execution of a thread.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Thread cancel."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Thread not found."
          }
        },
        "tags": [
          "Assistant"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/config/logs": {
      "get": {
        "operationId": "ConfigController_instanceLogs",
        "summary": "Get instance logs.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Config"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/config/instance": {
      "get": {
        "operationId": "ConfigController_instance",
        "summary": "Retrieve instance details and config.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Config"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ConfigController_instanceConfig",
        "summary": "Apply changes to instance config.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Config"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/config/instance/usage": {
      "get": {
        "operationId": "ConfigController_current",
        "summary": "Retrieve instance details and config.",
        "description": "\n    ROLES: INSTANCE_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User object from JWT token."
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "tags": [
          "Config"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/config/instance/purgeCache": {
      "post": {
        "operationId": "ConfigController_purgeCache",
        "summary": "Purge cache.",
        "description": "\n    ROLES: AUTOMATION_ADMIN\n    USER: true\n    SERVICE ACCOUNT: true\n    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad input of the data."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          }
        },
        "tags": [
          "Config"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "RevoNG - dev",
    "description": "\nThis is official API documentation of <i>RevoNG</i> platform.<br>\nAPI can be accessible once you own license which you can purchase via <a href=\"mailto:info@revong.com\" target=\"_blank\">info@revoengine.com</a> or <a href=\"https://www.revong.com\" target=\"_blank\">official website</a>, check our <a href=\"https://www.revong.com/plans\" target=\"_blank\">plans</a>.<br>\nThere are 2 ways of authentication to the API:<br>\n<li>User OAuth</li>\n<p>You can login via the application, OAuth is built in into the platform, for the M2M communication, you must create API key.</p>\n<li>API Key Pair</li>\n<p>You must provide headers in order to be validated by the server <i>X-API-KEY, X-API-SECRET, X-API-INSTANCE</i>.</p>\n<p>You can generate API keys for users and service accounts.</p>\n<p>You can add whitelisting of IP addresses for API client, e.g. only selected network (IP address, or IP with CIDR).</p>\n<p><b>Note:</b> Once API key pair is generated, it cannot be obtained again, you must revoke API pair and generate new one.</p>\n<p><b>Warning:</b> This API spec is no longer updated.</p>\n",
    "version": "c96eca1b58c9efcfe226045011e06f469bb3a986",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "UpdateMeTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Allowed token."
          }
        }
      },
      "IdDataDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateMeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You can to provide name of the user."
          },
          "surname": {
            "type": "string",
            "description": "You can to provide surname of the user."
          },
          "phone": {
            "type": "string",
            "description": "You can to provide phone number of the user (must be valid), it should include region e.g. +48..."
          },
          "code": {
            "type": "string",
            "description": "You must provide code when phone or mail provided."
          },
          "metaData": {
            "type": "object",
            "description": ""
          },
          "advancedData": {
            "type": "object",
            "description": ""
          }
        }
      },
      "FileUploadDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "file"
        ]
      },
      "UserKeyWhitelistDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You need to provide name of the user."
          },
          "type": {
            "type": "string",
            "description": "You need to provide type of whitelist IP,IP_SUBNET,RANGE."
          },
          "value": {
            "type": "string",
            "description": "You need to provide IP, IP (10.0.8.0)/MASK(10.0.8.0/18)/RANGE(10.0.8.0-10.0.8.255)."
          }
        }
      },
      "CreateKeyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You need to provide name of the user."
          },
          "restricted": {
            "type": "boolean",
            "description": "You can provide if key should be whitelisted."
          },
          "whitelist": {
            "description": "In case when restricted, this should be filled also.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserKeyWhitelistDto"
            }
          },
          "expireAt": {
            "format": "date-time",
            "type": "string",
            "description": "Aggregation period from."
          }
        },
        "required": [
          "name",
          "restricted",
          "expireAt"
        ]
      },
      "UpdateKeyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You need to provide name of the user."
          },
          "restricted": {
            "type": "boolean",
            "description": "You can provide if key should be whitelisted."
          },
          "whitelist": {
            "description": "In case when restricted, this should be filled also.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserKeyWhitelistDto"
            }
          }
        },
        "required": [
          "name",
          "restricted"
        ]
      },
      "CodeRequiredDto": {
        "type": "object",
        "properties": {}
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You need to provide name of the user."
          },
          "surname": {
            "type": "string",
            "description": "You can provide surname of the user."
          },
          "mail": {
            "type": "string",
            "description": "End user email."
          },
          "phone": {
            "type": "string",
            "description": "You can provide phone number of the user (must be valid), it should include region e.g. +48..."
          },
          "metaData": {
            "type": "object",
            "description": ""
          },
          "advancedData": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "name",
          "mail",
          "phone"
        ]
      },
      "CreateServiceAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You need to provide name of the user."
          },
          "mail": {
            "type": "string",
            "description": "You can provide mail of external service account."
          },
          "ownerId": {
            "type": "string",
            "description": "You can provide owner of the group, required if ownerType is assigned."
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type.",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          "metaData": {
            "type": "object",
            "description": ""
          },
          "advancedData": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "name",
          "mail",
          "ownerId",
          "ownerType"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You can to provide name of the user."
          },
          "surname": {
            "type": "string",
            "description": "You can to provide surname of the user."
          },
          "mail": {
            "type": "string",
            "description": "Corporate email of the user (must be valid)."
          },
          "phone": {
            "type": "string",
            "description": "You can to provide phone number of the user (must be valid), it should include region e.g. +48..."
          },
          "ownerId": {
            "type": "string",
            "description": "You can provide owner of the group, required if ownerType is assigned."
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type.",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          "metaData": {
            "type": "object",
            "description": ""
          },
          "advancedData": {
            "type": "object",
            "description": ""
          },
          "version": {
            "type": "number",
            "description": "You must provide current version."
          }
        },
        "required": [
          "version"
        ]
      },
      "RunOptionsDto": {
        "type": "object",
        "properties": {
          "skipLibs": {
            "type": "boolean"
          },
          "legacyResults": {
            "type": "boolean"
          },
          "hideRequest": {
            "type": "boolean"
          },
          "hideResponse": {
            "type": "boolean"
          }
        }
      },
      "EndpointRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "componentId": {
            "type": "string",
            "description": "Component identifier."
          },
          "componentVersion": {
            "type": "number",
            "description": "Component version, if left empty it will use latest component version)."
          },
          "path": {
            "type": "string",
            "description": "Path, e.g. /api/v1/users/{user}"
          },
          "method": {
            "type": "string",
            "description": "Method.",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          },
          "inputs": {
            "type": "object"
          },
          "componentSchemaId": {
            "type": "string",
            "description": "Validate data input with schema component."
          },
          "componentSchemaVersion": {
            "type": "number",
            "description": "Schema component version, if left empty it will use latest schema component version if specified)."
          },
          "options": {
            "description": "Options.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunOptionsDto"
              }
            ]
          }
        },
        "required": [
          "name",
          "path",
          "method"
        ]
      },
      "UpdateEndpointRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "componentId": {
            "type": "string",
            "description": "Component identifier."
          },
          "componentVersion": {
            "type": "number",
            "description": "Component version, if left empty it will use latest component version)."
          },
          "path": {
            "type": "string",
            "description": "Path, e.g. /api/v1/users/{user}"
          },
          "method": {
            "type": "string",
            "description": "Method.",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          },
          "inputs": {
            "type": "object"
          },
          "componentSchemaId": {
            "type": "string",
            "description": "Validate data input with schema component."
          },
          "componentSchemaVersion": {
            "type": "number",
            "description": "Schema component version, if left empty it will use latest schema component version if specified)."
          },
          "options": {
            "description": "Options.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunOptionsDto"
              }
            ]
          },
          "version": {
            "type": "number",
            "description": "Version."
          }
        },
        "required": [
          "version"
        ]
      },
      "APISingleStatsDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "boolean",
            "description": "Show API path (exclude dynamic routing)."
          },
          "url": {
            "type": "boolean",
            "description": "Show end URL (include dynamic routing)."
          },
          "from": {
            "format": "date-time",
            "type": "string",
            "description": "Aggregation period from."
          },
          "to": {
            "format": "date-time",
            "type": "string",
            "description": "Aggregation period to."
          },
          "granularity": {
            "type": "string",
            "description": "Aggregation period type.",
            "enum": [
              "YEAR",
              "QUARTER",
              "MONTH",
              "WEEK",
              "DAY",
              "HOUR",
              "MINUTE",
              "SECOND"
            ]
          }
        },
        "required": [
          "from",
          "to",
          "granularity"
        ]
      },
      "EndpointValidateDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path, e.g. /api/v1/users/{user}"
          },
          "method": {
            "type": "string",
            "description": "Method.",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          }
        }
      },
      "CreateComponentDto": {
        "type": "object",
        "properties": {
          "componentId": {
            "type": "string",
            "description": "componentId optionally used for existing components"
          },
          "name": {
            "type": "string",
            "description": "Name is only used for the presentation."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "type": {
            "type": "string",
            "description": "Type of component must be one of: CODE_JS,CODE_TS,CODE_JS_LIB,CODE_TS_LIB,JSON_VALIDATOR."
          },
          "active": {
            "type": "boolean",
            "description": "Activate upon creation."
          }
        },
        "required": [
          "componentId",
          "name",
          "type",
          "active"
        ]
      },
      "UpdateComponentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is only used for the presentation."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "version": {
            "type": "number",
            "description": "Version."
          }
        },
        "required": [
          "version"
        ]
      },
      "ComponentElementsDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key of the element."
          },
          "timeout": {
            "type": "number",
            "description": "Timeout of the element."
          },
          "desc": {
            "type": "string",
            "description": "Representation description e.g. swagger spec details."
          },
          "details": {
            "type": "string",
            "description": "Details."
          },
          "hidden": {
            "type": "boolean",
            "description": "Element hidden from results."
          },
          "order": {
            "type": "number",
            "description": "Order of the element (must be unique)."
          }
        },
        "required": [
          "key",
          "details",
          "hidden",
          "order"
        ]
      },
      "CreateRoleGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "category": {
            "type": "string",
            "description": "Category."
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateRoleGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label is only used for the presentation."
          },
          "desc": {
            "type": "string",
            "description": "Description of role group."
          },
          "category": {
            "type": "string",
            "description": "Category is only used for the presentation."
          },
          "version": {
            "type": "number",
            "description": "You must provide current version."
          }
        },
        "required": [
          "version"
        ]
      },
      "ReferenceUserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "You must provide userId."
          }
        },
        "required": [
          "userId"
        ]
      },
      "ReferenceRoleDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "You must provide roleId."
          }
        },
        "required": [
          "key"
        ]
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label is only used for the presentation."
          },
          "category": {
            "type": "string",
            "description": "Category is only used for the presentation."
          },
          "desc": {
            "type": "string",
            "description": "Desc (visible to users)."
          },
          "ownerId": {
            "type": "string",
            "description": "You must provide owner of the group."
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type.",
            "enum": [
              "USER",
              "GROUP"
            ]
          }
        },
        "required": [
          "name",
          "ownerId",
          "ownerType"
        ]
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label is only used for the presentation."
          },
          "category": {
            "type": "string",
            "description": "Category is only used for the presentation."
          },
          "desc": {
            "type": "string",
            "description": "Desc (visible to users)."
          },
          "ownerId": {
            "type": "string",
            "description": "You must provide owner of the group."
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type."
          }
        }
      },
      "CreateResourceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "type": {
            "type": "string",
            "description": "You can provide type of resource (view schema) [DATA,BIG_DATA,TABLE,BIG_TABLE]."
          },
          "restricted": {
            "type": "boolean",
            "description": "Provide if access should be restricted."
          },
          "active": {
            "type": "boolean",
            "description": "Provide if should be active/visible to users."
          },
          "metaSchemaId": {
            "type": "string",
            "description": "You must set default schematic from schema."
          },
          "groups": {
            "description": "Provide which groups should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "users": {
            "description": "Provide which users should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parentId": {
            "type": "string",
            "description": "Provide if resource has parent resource."
          }
        },
        "required": [
          "name",
          "restricted",
          "active"
        ]
      },
      "UpdateResourceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "type": {
            "type": "string",
            "description": "You can provide type of resource (view schema) [DATA,BIG_DATA,TABLE,BIG_TABLE]."
          },
          "restricted": {
            "type": "boolean",
            "description": "Provide if access should be restricted."
          },
          "groups": {
            "description": "Provide which groups should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "users": {
            "description": "Provide which users should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parentId": {
            "type": "string",
            "description": "Provide if resource has parent resource."
          },
          "version": {
            "type": "number",
            "description": "Provide current version."
          }
        },
        "required": [
          "version"
        ]
      },
      "ColumnRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id of column"
          },
          "displayName": {
            "type": "string",
            "title": "Display name"
          },
          "field": {
            "type": "string",
            "title": "Field name"
          },
          "aggFunc": {
            "type": "string",
            "title": "Aggregation function [AVG,COUNT,MIN,MAX,SUM] etc."
          },
          "customAggFunc": {
            "type": "object",
            "title": "Custom customAggFunc."
          }
        },
        "required": [
          "id",
          "displayName",
          "field"
        ]
      },
      "FilterConditionRequestDto": {
        "type": "object",
        "properties": {
          "filterType": {
            "type": "string",
            "title": "Filter type, must be one of [number,text,date,boolean]"
          },
          "key": {
            "title": "Key",
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterConditionRequestDto"
              }
            ]
          },
          "type": {
            "type": "string",
            "title": "Filter type (must be filled in case where operator is empty).",
            "description": "Filter types must be one of:\n        Text - equals,notEquals,isNull,isNotNull,in,notIn,contains,notContains,startsWith,endsWith,like,notLike\n        Number - equals,notEquals,greaterThan,greaterThanOrEqual,lessThan,lessThanOrEqual,isNull,isNotNull,in,notIn\n        Date - equals,notEquals,greaterThan,greaterThanOrEqual,lessThan,lessThanOrEqual,isNull,isNotNull,in,notIn"
          },
          "filter": {
            "type": "object",
            "title": "Filter value.",
            "description": "You must specify correct value based on filter type."
          },
          "filterTo": {
            "type": "object",
            "title": "You can specify correct value based on filter type for \"between\" condition."
          },
          "operator": {
            "type": "string",
            "title": "In case of 2 conditions for single item, you must specify OR/AND parameter."
          },
          "condition1": {
            "title": "Condition object 1.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterConditionRequestDto"
              }
            ]
          },
          "condition2": {
            "title": "Condition object 2.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterConditionRequestDto"
              }
            ]
          }
        },
        "required": [
          "filterType"
        ]
      },
      "SortModelDto": {
        "type": "object",
        "properties": {
          "colId": {
            "type": "string",
            "title": "ColumnId"
          },
          "sort": {
            "type": "string",
            "title": "Sorting option must be one of [ASC,DESC,asc,desc]"
          }
        },
        "required": [
          "sort"
        ]
      },
      "DataRequestDto": {
        "type": "object",
        "properties": {
          "startRow": {
            "type": "number",
            "title": "Number from which should we take the data from (could be limited by the server)."
          },
          "endRow": {
            "type": "number",
            "title": "Number to which should we take the data to (could be limited by the server)."
          },
          "rowGroupCols": {
            "title": "You must provide rowGroupColumns even empty one [].",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnRequestDto"
            }
          },
          "valueCols": {
            "title": "You must provide valueCols even empty one [].",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnRequestDto"
            }
          },
          "pivotCols": {
            "title": "You must provide pivotCols even empty one [].",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnRequestDto"
            }
          },
          "pivotMode": {
            "type": "boolean",
            "title": "Mark if pivotMode is enabled."
          },
          "groupKeys": {
            "title": "You must provide pivotCols even empty one [].",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filterModel": {
            "title": "FilterModel of the request even empty one [].",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterConditionRequestDto"
            }
          },
          "sortModel": {
            "title": "SortModel of the request even empty one [].",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortModelDto"
            }
          }
        },
        "required": [
          "startRow",
          "endRow",
          "rowGroupCols",
          "valueCols",
          "pivotCols",
          "pivotMode",
          "groupKeys",
          "filterModel",
          "sortModel"
        ]
      },
      "CreateResourceItemDto": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "You need to provide itemId."
          },
          "key": {
            "type": "string",
            "description": "You need to provide key."
          },
          "key1": {
            "type": "string"
          },
          "key2": {
            "type": "string"
          },
          "intval1": {
            "type": "number",
            "description": "You can provide intval1 value."
          },
          "intval2": {
            "type": "number",
            "description": "You can provide intval2 value."
          },
          "intval3": {
            "type": "number",
            "description": "You can provide intval3 value."
          },
          "intval4": {
            "type": "number",
            "description": "You can provide intval4 value."
          },
          "intval5": {
            "type": "number",
            "description": "You can provide intval5 value."
          },
          "intval6": {
            "type": "number",
            "description": "You can provide intval6 value."
          },
          "intval7": {
            "type": "number",
            "description": "You can provide intval7 value."
          },
          "intval8": {
            "type": "number",
            "description": "You can provide intval8 value."
          },
          "intval9": {
            "type": "number",
            "description": "You can provide intval9 value."
          },
          "intval10": {
            "type": "number",
            "description": "You can provide intval10 value."
          },
          "bolval1": {
            "type": "boolean",
            "description": "You can provide bolval1 value."
          },
          "bolval2": {
            "type": "boolean",
            "description": "You can provide bolval2 value."
          },
          "bolval3": {
            "type": "boolean",
            "description": "You can provide bolval3 value."
          },
          "bolval4": {
            "type": "boolean",
            "description": "You can provide bolval4 value."
          },
          "bolval5": {
            "type": "boolean",
            "description": "You can provide bolval5 value."
          },
          "bolval6": {
            "type": "boolean",
            "description": "You can provide bolval6 value."
          },
          "bolval7": {
            "type": "boolean",
            "description": "You can provide bolval7 value."
          },
          "bolval8": {
            "type": "boolean",
            "description": "You can provide bolval8 value."
          },
          "bolval9": {
            "type": "boolean",
            "description": "You can provide bolval9 value."
          },
          "bolval10": {
            "type": "boolean",
            "description": "You can provide bolval10 value."
          },
          "numval1": {
            "type": "number",
            "description": "You can provide numval1 value ,limited to 15 decimal places."
          },
          "numval2": {
            "type": "number",
            "description": "You can provide numval2 value ,limited to 15 decimal places."
          },
          "numval3": {
            "type": "number",
            "description": "You can provide numval3 value ,limited to 15 decimal places."
          },
          "numval4": {
            "type": "number",
            "description": "You can provide numval4 value ,limited to 15 decimal places."
          },
          "numval5": {
            "type": "number",
            "description": "You can provide numval5 value ,limited to 15 decimal places."
          },
          "numval6": {
            "type": "number",
            "description": "You can provide numval6 value ,limited to 15 decimal places."
          },
          "numval7": {
            "type": "number",
            "description": "You can provide numval7 value ,limited to 15 decimal places."
          },
          "numval8": {
            "type": "number",
            "description": "You can provide numval8 value ,limited to 15 decimal places."
          },
          "numval9": {
            "type": "number",
            "description": "You can provide numval9 value ,limited to 15 decimal places."
          },
          "numval10": {
            "type": "number",
            "description": "You can provide numval10 value ,limited to 15 decimal places."
          },
          "numval11": {
            "type": "number",
            "description": "You can provide numval11 value ,limited to 15 decimal places."
          },
          "numval12": {
            "type": "number",
            "description": "You can provide numval12 value ,limited to 15 decimal places."
          },
          "numval13": {
            "type": "number",
            "description": "You can provide numval13 value ,limited to 15 decimal places."
          },
          "numval14": {
            "type": "number",
            "description": "You can provide numval14 value ,limited to 15 decimal places."
          },
          "numval15": {
            "type": "number",
            "description": "You can provide numval15 value ,limited to 15 decimal places."
          },
          "numval16": {
            "type": "number",
            "description": "You can provide numval16 value ,limited to 15 decimal places."
          },
          "numval17": {
            "type": "number",
            "description": "You can provide numval17 value ,limited to 15 decimal places."
          },
          "numval18": {
            "type": "number",
            "description": "You can provide numval18 value ,limited to 15 decimal places."
          },
          "numval19": {
            "type": "number",
            "description": "You can provide numval19 value ,limited to 15 decimal places."
          },
          "numval20": {
            "type": "number",
            "description": "You can provide numval20 value ,limited to 15 decimal places."
          },
          "strval1": {
            "type": "string",
            "description": "You can provide strval1 value."
          },
          "strval2": {
            "type": "string",
            "description": "You can provide strval2 value."
          },
          "strval3": {
            "type": "string",
            "description": "You can provide strval3 value."
          },
          "strval4": {
            "type": "string",
            "description": "You can provide strval4 value."
          },
          "strval5": {
            "type": "string",
            "description": "You can provide strval5 value."
          },
          "strval6": {
            "type": "string",
            "description": "You can provide strval6 value."
          },
          "strval7": {
            "type": "string",
            "description": "You can provide strval7 value."
          },
          "strval8": {
            "type": "string",
            "description": "You can provide strval8 value."
          },
          "strval9": {
            "type": "string",
            "description": "You can provide strval9 value."
          },
          "strval10": {
            "type": "string",
            "description": "You can provide strval10 value."
          },
          "strval11": {
            "type": "string",
            "description": "You can provide strval11 value."
          },
          "strval12": {
            "type": "string",
            "description": "You can provide strval12 value."
          },
          "strval13": {
            "type": "string",
            "description": "You can provide strval13 value."
          },
          "strval14": {
            "type": "string",
            "description": "You can provide strval14 value."
          },
          "strval15": {
            "type": "string",
            "description": "You can provide strval15 value."
          },
          "strval16": {
            "type": "string",
            "description": "You can provide strval16 value."
          },
          "strval17": {
            "type": "string",
            "description": "You can provide strval17 value."
          },
          "strval18": {
            "type": "string",
            "description": "You can provide strval18 value."
          },
          "strval19": {
            "type": "string",
            "description": "You can provide strval19 value."
          },
          "strval20": {
            "type": "string",
            "description": "You can provide strval20 value."
          },
          "strval21": {
            "type": "string",
            "description": "You can provide strval21 value."
          },
          "strval22": {
            "type": "string",
            "description": "You can provide strval22 value."
          },
          "strval23": {
            "type": "string",
            "description": "You can provide strval23 value."
          },
          "strval24": {
            "type": "string",
            "description": "You can provide strval24 value."
          },
          "strval25": {
            "type": "string",
            "description": "You can provide strval25 value."
          },
          "strval26": {
            "type": "string",
            "description": "You can provide strval26 value."
          },
          "strval27": {
            "type": "string",
            "description": "You can provide strval27 value."
          },
          "strval28": {
            "type": "string",
            "description": "You can provide strval28 value."
          },
          "strval29": {
            "type": "string",
            "description": "You can provide strval29 value."
          },
          "strval30": {
            "type": "string",
            "description": "You can provide strval30 value."
          },
          "dtzval1": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval1 valueas DateString."
          },
          "dtzval2": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval2 valueas DateString."
          },
          "dtzval3": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval3 valueas DateString."
          },
          "dtzval4": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval4 valueas DateString."
          },
          "dtzval5": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval5 valueas DateString."
          },
          "dtzval6": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval6 valueas DateString."
          },
          "dtzval7": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval7 valueas DateString."
          },
          "dtzval8": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval8 valueas DateString."
          },
          "dtzval9": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval9 valueas DateString."
          },
          "dtzval10": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval10 valueas DateString."
          },
          "special1": {
            "type": "object",
            "description": "You can provide special1 value as JSON."
          },
          "special2": {
            "type": "object",
            "description": "You can provide special2 value as JSON."
          },
          "special3": {
            "type": "object",
            "description": "You can provide special3 value as JSON."
          },
          "special4": {
            "type": "object",
            "description": "You can provide special4 value as JSON."
          },
          "special5": {
            "type": "object",
            "description": "You can provide special5 value as JSON."
          },
          "special6": {
            "type": "object",
            "description": "You can provide special6 value as JSON."
          },
          "special7": {
            "type": "object",
            "description": "You can provide special7 value as JSON."
          },
          "special8": {
            "type": "object",
            "description": "You can provide special8 value as JSON."
          },
          "special9": {
            "type": "object",
            "description": "You can provide special9 value as JSON."
          },
          "special10": {
            "type": "object",
            "description": "You can provide special10 value as JSON."
          }
        },
        "required": [
          "itemId",
          "key",
          "key1",
          "key2"
        ]
      },
      "CreateResourceItemsDto": {
        "type": "object",
        "properties": {
          "upsert": {
            "type": "boolean",
            "description": "Specify if upsert is used (addOrUpdate)"
          },
          "return": {
            "type": "boolean",
            "description": "Return created items (it doesnt return conflicted items)."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateResourceItemDto"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "UpdateResourceItemDto": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "You need to provide itemId."
          },
          "key": {
            "type": "string",
            "description": "You need to provide key."
          },
          "key1": {
            "type": "string"
          },
          "key2": {
            "type": "string"
          },
          "intval1": {
            "type": "number",
            "description": "You can provide intval1 value."
          },
          "intval2": {
            "type": "number",
            "description": "You can provide intval2 value."
          },
          "intval3": {
            "type": "number",
            "description": "You can provide intval3 value."
          },
          "intval4": {
            "type": "number",
            "description": "You can provide intval4 value."
          },
          "intval5": {
            "type": "number",
            "description": "You can provide intval5 value."
          },
          "intval6": {
            "type": "number",
            "description": "You can provide intval6 value."
          },
          "intval7": {
            "type": "number",
            "description": "You can provide intval7 value."
          },
          "intval8": {
            "type": "number",
            "description": "You can provide intval8 value."
          },
          "intval9": {
            "type": "number",
            "description": "You can provide intval9 value."
          },
          "intval10": {
            "type": "number",
            "description": "You can provide intval10 value."
          },
          "bolval1": {
            "type": "boolean",
            "description": "You can provide bolval1 value."
          },
          "bolval2": {
            "type": "boolean",
            "description": "You can provide bolval2 value."
          },
          "bolval3": {
            "type": "boolean",
            "description": "You can provide bolval3 value."
          },
          "bolval4": {
            "type": "boolean",
            "description": "You can provide bolval4 value."
          },
          "bolval5": {
            "type": "boolean",
            "description": "You can provide bolval5 value."
          },
          "bolval6": {
            "type": "boolean",
            "description": "You can provide bolval6 value."
          },
          "bolval7": {
            "type": "boolean",
            "description": "You can provide bolval7 value."
          },
          "bolval8": {
            "type": "boolean",
            "description": "You can provide bolval8 value."
          },
          "bolval9": {
            "type": "boolean",
            "description": "You can provide bolval9 value."
          },
          "bolval10": {
            "type": "boolean",
            "description": "You can provide bolval10 value."
          },
          "numval1": {
            "type": "number",
            "description": "You can provide numval1 value ,limited to 15 decimal places."
          },
          "numval2": {
            "type": "number",
            "description": "You can provide numval2 value ,limited to 15 decimal places."
          },
          "numval3": {
            "type": "number",
            "description": "You can provide numval3 value ,limited to 15 decimal places."
          },
          "numval4": {
            "type": "number",
            "description": "You can provide numval4 value ,limited to 15 decimal places."
          },
          "numval5": {
            "type": "number",
            "description": "You can provide numval5 value ,limited to 15 decimal places."
          },
          "numval6": {
            "type": "number",
            "description": "You can provide numval6 value ,limited to 15 decimal places."
          },
          "numval7": {
            "type": "number",
            "description": "You can provide numval7 value ,limited to 15 decimal places."
          },
          "numval8": {
            "type": "number",
            "description": "You can provide numval8 value ,limited to 15 decimal places."
          },
          "numval9": {
            "type": "number",
            "description": "You can provide numval9 value ,limited to 15 decimal places."
          },
          "numval10": {
            "type": "number",
            "description": "You can provide numval10 value ,limited to 15 decimal places."
          },
          "numval11": {
            "type": "number",
            "description": "You can provide numval11 value ,limited to 15 decimal places."
          },
          "numval12": {
            "type": "number",
            "description": "You can provide numval12 value ,limited to 15 decimal places."
          },
          "numval13": {
            "type": "number",
            "description": "You can provide numval13 value ,limited to 15 decimal places."
          },
          "numval14": {
            "type": "number",
            "description": "You can provide numval14 value ,limited to 15 decimal places."
          },
          "numval15": {
            "type": "number",
            "description": "You can provide numval15 value ,limited to 15 decimal places."
          },
          "numval16": {
            "type": "number",
            "description": "You can provide numval16 value ,limited to 15 decimal places."
          },
          "numval17": {
            "type": "number",
            "description": "You can provide numval17 value ,limited to 15 decimal places."
          },
          "numval18": {
            "type": "number",
            "description": "You can provide numval18 value ,limited to 15 decimal places."
          },
          "numval19": {
            "type": "number",
            "description": "You can provide numval19 value ,limited to 15 decimal places."
          },
          "numval20": {
            "type": "number",
            "description": "You can provide numval20 value ,limited to 15 decimal places."
          },
          "strval1": {
            "type": "string",
            "description": "You can provide strval1 value."
          },
          "strval2": {
            "type": "string",
            "description": "You can provide strval2 value."
          },
          "strval3": {
            "type": "string",
            "description": "You can provide strval3 value."
          },
          "strval4": {
            "type": "string",
            "description": "You can provide strval4 value."
          },
          "strval5": {
            "type": "string",
            "description": "You can provide strval5 value."
          },
          "strval6": {
            "type": "string",
            "description": "You can provide strval6 value."
          },
          "strval7": {
            "type": "string",
            "description": "You can provide strval7 value."
          },
          "strval8": {
            "type": "string",
            "description": "You can provide strval8 value."
          },
          "strval9": {
            "type": "string",
            "description": "You can provide strval9 value."
          },
          "strval10": {
            "type": "string",
            "description": "You can provide strval10 value."
          },
          "strval11": {
            "type": "string",
            "description": "You can provide strval11 value."
          },
          "strval12": {
            "type": "string",
            "description": "You can provide strval12 value."
          },
          "strval13": {
            "type": "string",
            "description": "You can provide strval13 value."
          },
          "strval14": {
            "type": "string",
            "description": "You can provide strval14 value."
          },
          "strval15": {
            "type": "string",
            "description": "You can provide strval15 value."
          },
          "strval16": {
            "type": "string",
            "description": "You can provide strval16 value."
          },
          "strval17": {
            "type": "string",
            "description": "You can provide strval17 value."
          },
          "strval18": {
            "type": "string",
            "description": "You can provide strval18 value."
          },
          "strval19": {
            "type": "string",
            "description": "You can provide strval19 value."
          },
          "strval20": {
            "type": "string",
            "description": "You can provide strval20 value."
          },
          "strval21": {
            "type": "string",
            "description": "You can provide strval21 value."
          },
          "strval22": {
            "type": "string",
            "description": "You can provide strval22 value."
          },
          "strval23": {
            "type": "string",
            "description": "You can provide strval23 value."
          },
          "strval24": {
            "type": "string",
            "description": "You can provide strval24 value."
          },
          "strval25": {
            "type": "string",
            "description": "You can provide strval25 value."
          },
          "strval26": {
            "type": "string",
            "description": "You can provide strval26 value."
          },
          "strval27": {
            "type": "string",
            "description": "You can provide strval27 value."
          },
          "strval28": {
            "type": "string",
            "description": "You can provide strval28 value."
          },
          "strval29": {
            "type": "string",
            "description": "You can provide strval29 value."
          },
          "strval30": {
            "type": "string",
            "description": "You can provide strval30 value."
          },
          "dtzval1": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval1 valueas DateString."
          },
          "dtzval2": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval2 valueas DateString."
          },
          "dtzval3": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval3 valueas DateString."
          },
          "dtzval4": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval4 valueas DateString."
          },
          "dtzval5": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval5 valueas DateString."
          },
          "dtzval6": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval6 valueas DateString."
          },
          "dtzval7": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval7 valueas DateString."
          },
          "dtzval8": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval8 valueas DateString."
          },
          "dtzval9": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval9 valueas DateString."
          },
          "dtzval10": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval10 valueas DateString."
          },
          "special1": {
            "type": "object",
            "description": "You can provide special1 value as JSON."
          },
          "special2": {
            "type": "object",
            "description": "You can provide special2 value as JSON."
          },
          "special3": {
            "type": "object",
            "description": "You can provide special3 value as JSON."
          },
          "special4": {
            "type": "object",
            "description": "You can provide special4 value as JSON."
          },
          "special5": {
            "type": "object",
            "description": "You can provide special5 value as JSON."
          },
          "special6": {
            "type": "object",
            "description": "You can provide special6 value as JSON."
          },
          "special7": {
            "type": "object",
            "description": "You can provide special7 value as JSON."
          },
          "special8": {
            "type": "object",
            "description": "You can provide special8 value as JSON."
          },
          "special9": {
            "type": "object",
            "description": "You can provide special9 value as JSON."
          },
          "special10": {
            "type": "object",
            "description": "You can provide special10 value as JSON."
          },
          "version": {
            "type": "number",
            "description": "Provide current version (not required due to the overload, wont be validated in batch updates where more than 100 items are taken into account)."
          }
        },
        "required": [
          "itemId",
          "key",
          "key1",
          "key2"
        ]
      },
      "NewResourceItemDto": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "You need to provide itemId."
          },
          "key": {
            "type": "string"
          },
          "key1": {
            "type": "string"
          },
          "key2": {
            "type": "string"
          },
          "intval1": {
            "type": "number",
            "description": "You can provide intval1 value."
          },
          "intval2": {
            "type": "number",
            "description": "You can provide intval2 value."
          },
          "intval3": {
            "type": "number",
            "description": "You can provide intval3 value."
          },
          "intval4": {
            "type": "number",
            "description": "You can provide intval4 value."
          },
          "intval5": {
            "type": "number",
            "description": "You can provide intval5 value."
          },
          "bolval1": {
            "type": "boolean",
            "description": "You can provide bolval1 value."
          },
          "bolval2": {
            "type": "boolean",
            "description": "You can provide bolval2 value."
          },
          "bolval3": {
            "type": "boolean",
            "description": "You can provide bolval3 value."
          },
          "bolval4": {
            "type": "boolean",
            "description": "You can provide bolval4 value."
          },
          "bolval5": {
            "type": "boolean",
            "description": "You can provide bolval5 value."
          },
          "numval1": {
            "type": "number",
            "description": "You can provide numval1 value ,limited to 15 decimal places."
          },
          "numval2": {
            "type": "number",
            "description": "You can provide numval2 value ,limited to 15 decimal places."
          },
          "numval3": {
            "type": "number",
            "description": "You can provide numval3 value ,limited to 15 decimal places."
          },
          "numval4": {
            "type": "number",
            "description": "You can provide numval4 value ,limited to 15 decimal places."
          },
          "numval5": {
            "type": "number",
            "description": "You can provide numval5 value ,limited to 15 decimal places."
          },
          "numval6": {
            "type": "number",
            "description": "You can provide numval6 value ,limited to 15 decimal places."
          },
          "numval7": {
            "type": "number",
            "description": "You can provide numval7 value ,limited to 15 decimal places."
          },
          "numval8": {
            "type": "number",
            "description": "You can provide numval8 value ,limited to 15 decimal places."
          },
          "numval9": {
            "type": "number",
            "description": "You can provide numval9 value ,limited to 15 decimal places."
          },
          "numval10": {
            "type": "number",
            "description": "You can provide numval10 value ,limited to 15 decimal places."
          },
          "numval11": {
            "type": "number",
            "description": "You can provide numval11 value ,limited to 15 decimal places."
          },
          "numval12": {
            "type": "number",
            "description": "You can provide numval12 value ,limited to 15 decimal places."
          },
          "numval13": {
            "type": "number",
            "description": "You can provide numval13 value ,limited to 15 decimal places."
          },
          "numval14": {
            "type": "number",
            "description": "You can provide numval14 value ,limited to 15 decimal places."
          },
          "numval15": {
            "type": "number",
            "description": "You can provide numval15 value ,limited to 15 decimal places."
          },
          "strval1": {
            "type": "string",
            "description": "You can provide strval1 value."
          },
          "strval2": {
            "type": "string",
            "description": "You can provide strval2 value."
          },
          "strval3": {
            "type": "string",
            "description": "You can provide strval3 value."
          },
          "strval4": {
            "type": "string",
            "description": "You can provide strval4 value."
          },
          "strval5": {
            "type": "string",
            "description": "You can provide strval5 value."
          },
          "strval6": {
            "type": "string",
            "description": "You can provide strval6 value."
          },
          "strval7": {
            "type": "string",
            "description": "You can provide strval7 value."
          },
          "strval8": {
            "type": "string",
            "description": "You can provide strval8 value."
          },
          "strval9": {
            "type": "string",
            "description": "You can provide strval9 value."
          },
          "strval10": {
            "type": "string",
            "description": "You can provide strval10 value."
          },
          "strval11": {
            "type": "string",
            "description": "You can provide strval11 value."
          },
          "strval12": {
            "type": "string",
            "description": "You can provide strval12 value."
          },
          "strval13": {
            "type": "string",
            "description": "You can provide strval13 value."
          },
          "strval14": {
            "type": "string",
            "description": "You can provide strval14 value."
          },
          "strval15": {
            "type": "string",
            "description": "You can provide strval15 value."
          },
          "dtzval1": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval1 valueas DateString."
          },
          "dtzval2": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval2 valueas DateString."
          },
          "dtzval3": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval3 valueas DateString."
          },
          "dtzval4": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval4 valueas DateString."
          },
          "dtzval5": {
            "format": "date-time",
            "type": "string",
            "description": "You can provide dtzval5 valueas DateString."
          },
          "special1": {
            "type": "object",
            "description": "You can provide special1 value as JSON."
          },
          "special2": {
            "type": "object",
            "description": "You can provide special2 value as JSON."
          },
          "special3": {
            "type": "object",
            "description": "You can provide special3 value as JSON."
          },
          "special4": {
            "type": "object",
            "description": "You can provide special4 value as JSON."
          },
          "special5": {
            "type": "object",
            "description": "You can provide special5 value as JSON."
          }
        },
        "required": [
          "itemId",
          "key",
          "key1",
          "key2"
        ]
      },
      "SingleUpdateResourceItemDto": {
        "type": "object",
        "properties": {
          "old": {
            "description": "Provide old object to replace.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateResourceItemDto"
              }
            ]
          },
          "new": {
            "description": "Provide new object to replace.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewResourceItemDto"
              }
            ]
          },
          "return": {
            "type": "boolean",
            "description": "Provide if you want to fetch new item as response."
          }
        },
        "required": [
          "old",
          "new",
          "return"
        ]
      },
      "UpdateResourceItemsDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateResourceItemDto"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "ResourceItemReference": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "key1": {
            "type": "string"
          },
          "key2": {
            "type": "string"
          }
        },
        "required": [
          "itemId"
        ]
      },
      "DeleteResourceItemsDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceItemReference"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "CreatePreferenceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You must specify name."
          },
          "desc": {
            "type": "string",
            "description": "You can specify desc."
          },
          "type": {
            "type": "string",
            "description": "Type of preference"
          },
          "referenceType": {
            "type": "string",
            "description": "You must specify reference type (e.g. users/groups etc.), allowed pattern: \"a-zA-Z-0-9_\"."
          },
          "reference": {
            "type": "string",
            "description": "Id of reference"
          },
          "global": {
            "type": "boolean",
            "description": "You can specify if preference is shared with everyone else ('false' by default)."
          },
          "default": {
            "type": "boolean",
            "description": "You can specify if preference is default ('false' by default)."
          },
          "autoFit": {
            "type": "boolean",
            "description": "You can specify if accessing to this preference force 'Auto fit fill columns' when accessing ('false' by default)."
          },
          "data": {
            "description": "You must provide details.",
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "name",
          "type",
          "referenceType",
          "data"
        ]
      },
      "UpdatePreferenceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You must specify name."
          },
          "desc": {
            "type": "string",
            "description": "You can specify desc."
          },
          "referenceType": {
            "type": "string",
            "description": "You must specify reference type (e.g. users/groups etc.), allowed pattern: \"a-zA-Z-0-9_\"."
          },
          "reference": {
            "type": "string",
            "description": "Id of reference"
          },
          "global": {
            "type": "boolean",
            "description": "You can specify if preference is shared with everyone else ('false' by default)."
          },
          "default": {
            "type": "boolean",
            "description": "You can specify if preference is default ('false' by default)."
          },
          "autoFit": {
            "type": "boolean",
            "description": "You can specify if accessing to this preference force 'Auto fit fill columns' when accessing ('false' by default)."
          },
          "data": {
            "description": "You can provide details.",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "version": {
            "type": "number",
            "description": "You must provide current version."
          }
        },
        "required": [
          "name",
          "referenceType",
          "version"
        ]
      },
      "CreateMailTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "subject": {
            "type": "string",
            "description": "Subject."
          },
          "body": {
            "type": "string",
            "description": "Template Body."
          },
          "type": {
            "type": "string",
            "description": "Template type.",
            "enum": [
              "DEFAULT"
            ]
          }
        },
        "required": [
          "name",
          "body",
          "type"
        ]
      },
      "UpdateMailTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "subject": {
            "type": "string",
            "description": "Subject."
          },
          "body": {
            "type": "string",
            "description": "Template Body."
          },
          "type": {
            "type": "string",
            "description": "Template type.",
            "enum": [
              "DEFAULT"
            ]
          },
          "version": {
            "type": "number",
            "description": "Provide current version."
          }
        },
        "required": [
          "version"
        ]
      },
      "CreateSecretDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "category": {
            "type": "string",
            "description": ""
          },
          "desc": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "actDate": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "active": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "name",
          "secret"
        ]
      },
      "UpdateSecretDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "category": {
            "type": "string",
            "description": ""
          },
          "desc": {
            "type": "string",
            "description": ""
          },
          "version": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "version"
        ]
      },
      "CreateSecretDataDto": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "description": ""
          },
          "actDate": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "active": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "secret"
        ]
      },
      "CreateMetaSchemaDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "active": {
            "type": "boolean",
            "description": "You need to provide if schematic is active to be selected."
          },
          "locked": {
            "type": "boolean",
            "description": "You can mark schema as locked, so it cannot be edited."
          }
        },
        "required": [
          "name",
          "active",
          "locked"
        ]
      },
      "UpdateMetaSchemaDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "active": {
            "type": "boolean",
            "description": "You can provide if schematic is active to be selected."
          },
          "locked": {
            "type": "boolean",
            "description": "You can mark schema as locked, so it cannot be edited."
          },
          "version": {
            "type": "number",
            "description": "You must provide current version."
          }
        },
        "required": [
          "locked",
          "version"
        ]
      },
      "CreateMetaOptionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "You can specify name of the selection."
          },
          "value": {
            "type": "string",
            "description": "You need to specify value of selected item."
          },
          "order": {
            "type": "number",
            "description": "You can specify order of the value."
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "CreateMetaFieldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "lazyId": {
            "type": "string",
            "description": "lazyId."
          },
          "lazyType": {
            "type": "string",
            "description": "Description."
          },
          "fieldType": {
            "type": "string",
            "description": "You need to specify field type [Text,Integer,Numeric,Quantity,DateTime,Boolean,Single,Multi,URL,Phone,Mail,Groups,Users,Created Time,Created By,Last Update Time,Last Update By,Resources,Key,ResourcesItems,Percent,Money,Version].",
            "enum": [
              "Text",
              "Integer",
              "Numeric",
              "Quantity",
              "DateTime",
              "Boolean",
              "Single",
              "Multi",
              "URL",
              "Phone",
              "Mail",
              "Groups",
              "Users",
              "Created Time",
              "Created By",
              "Last Update Time",
              "Last Update By",
              "Resources",
              "Key",
              "ResourcesItems",
              "Percent",
              "Money",
              "Version"
            ]
          },
          "lazy": {
            "type": "boolean",
            "description": "Specify if lazy loading is enabled (e.g. list, dropdown options and more)."
          },
          "prefix": {
            "type": "string",
            "description": "Prefix of value, for example of Money you can specify currency e.g. $ 123,40"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix of value, for example of Money you can specify currency e.g. 123,40 PLN"
          },
          "rowGroup": {
            "type": "boolean",
            "description": "Select if row group is enabled."
          },
          "editable": {
            "type": "boolean",
            "description": "Select if should be editable (e.g. row change)."
          },
          "required": {
            "type": "boolean",
            "description": "You need to specific if field will be required to fill."
          },
          "hide": {
            "type": "boolean",
            "description": "Select if should be hidden by default."
          },
          "filter": {
            "type": "boolean",
            "description": "Select if should be filtered."
          },
          "sortable": {
            "type": "boolean",
            "description": "Select if should be sortable."
          },
          "order": {
            "type": "number",
            "description": "You can specify order of an field."
          },
          "restricted": {
            "type": "boolean",
            "description": "Provide if access should be restricted."
          },
          "active": {
            "type": "boolean",
            "description": "Provide if should be active/visible to users."
          },
          "groups": {
            "description": "Provide which groups should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "users": {
            "description": "Provide which users should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pinned": {
            "type": "string",
            "description": "Mark if should be pinned (left or right)."
          },
          "pivot": {
            "type": "boolean",
            "description": "Specify if Pivot is enabled by default."
          },
          "fontColor": {
            "type": "string",
            "description": "Global font color of the field value."
          },
          "backgroundColor": {
            "type": "string",
            "description": "Global background color of the field."
          },
          "options": {
            "description": "Provide value options (1-300).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMetaOptionDto"
            }
          }
        },
        "required": [
          "name",
          "fieldType",
          "required",
          "restricted",
          "active"
        ]
      },
      "UpdateMetaFieldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "fieldType": {
            "type": "string",
            "description": "You need to specify field type [Text,Integer,Numeric,Quantity,DateTime,Boolean,Single,Multi,URL,Phone,Mail,Groups,Users,Created Time,Created By,Last Update Time,Last Update By,Resources,Key,ResourcesItems,Percent,Money,Version].",
            "enum": [
              "Text",
              "Integer",
              "Numeric",
              "Quantity",
              "DateTime",
              "Boolean",
              "Single",
              "Multi",
              "URL",
              "Phone",
              "Mail",
              "Groups",
              "Users",
              "Created Time",
              "Created By",
              "Last Update Time",
              "Last Update By",
              "Resources",
              "Key",
              "ResourcesItems",
              "Percent",
              "Money",
              "Version"
            ]
          },
          "lazy": {
            "type": "boolean",
            "description": "Specify if lazy loading is enabled (e.g. list, dropdown options and more)."
          },
          "lazyId": {
            "type": "string",
            "description": "lazyId."
          },
          "lazyType": {
            "type": "string",
            "description": "Description."
          },
          "prefix": {
            "type": "string",
            "description": "Prefix of value, for example of Money you can specify currency e.g. $ 123,40"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix of value, for example of Money you can specify currency e.g. 123,40 PLN"
          },
          "rowGroup": {
            "type": "boolean",
            "description": "Select if row group is enabled."
          },
          "editable": {
            "type": "boolean",
            "description": "Select if should be editable (e.g. row change)."
          },
          "required": {
            "type": "boolean",
            "description": "You need to specific if field will be required to fill."
          },
          "hide": {
            "type": "boolean",
            "description": "Select if should be hidden by default."
          },
          "filter": {
            "type": "boolean",
            "description": "Select if should be filtered."
          },
          "sortable": {
            "type": "boolean",
            "description": "Select if should be sortable."
          },
          "order": {
            "type": "number",
            "description": "You can specify order of an field."
          },
          "restricted": {
            "type": "boolean",
            "description": "Provide if access should be restricted."
          },
          "active": {
            "type": "boolean",
            "description": "Provide if should be active/visible to users."
          },
          "groups": {
            "description": "Provide which groups should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "users": {
            "description": "Provide which users should have access to it, once restricted is true.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pinned": {
            "type": "string",
            "description": "Mark if should be pinned (left or right)."
          },
          "pivot": {
            "type": "boolean",
            "description": "Specify if Pivot is enabled by default."
          },
          "fontColor": {
            "type": "string",
            "description": "Global font color of the field value."
          },
          "backgroundColor": {
            "type": "string",
            "description": "Global background color of the field."
          },
          "options": {
            "description": "Provide value options (1-300).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMetaOptionDto"
            }
          },
          "version": {
            "type": "number",
            "description": "You must provide current version."
          }
        },
        "required": [
          "version"
        ]
      },
      "CreateFileDto": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "File name."
          },
          "contentType": {
            "type": "string",
            "description": "contentType"
          },
          "type": {
            "type": "string",
            "description": "Type.",
            "enum": [
              "FILE",
              "FOLDER"
            ]
          },
          "size": {
            "type": "number",
            "description": "Size of file (in bytes)."
          },
          "path": {
            "type": "string",
            "description": "path."
          }
        },
        "required": [
          "fileName",
          "type",
          "path"
        ]
      },
      "JobTemplateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "componentId": {
            "type": "string",
            "description": "Component identifier."
          },
          "componentVersion": {
            "type": "number",
            "description": "Component version, if left empty it will use latest component version)."
          },
          "triggerUser": {
            "type": "string",
            "description": "Invoke job on behalf of specific account."
          },
          "inputs": {
            "type": "object"
          },
          "options": {
            "description": "Options.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunOptionsDto"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateJobTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "componentId": {
            "type": "string",
            "description": "Component identifier."
          },
          "componentVersion": {
            "type": "number",
            "description": "Component version, if left empty it will use latest component version)."
          },
          "triggerUser": {
            "type": "string",
            "description": "Invoke job on behalf of specific account."
          },
          "inputs": {
            "type": "object"
          },
          "options": {
            "description": "Options.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunOptionsDto"
              }
            ]
          },
          "version": {
            "type": "number",
            "description": "Current version."
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "ScheduleRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provide name of result resource and automation itself."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "active": {
            "type": "boolean",
            "description": "Active."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "cron": {
            "type": "string",
            "description": "Cron for schedule."
          },
          "jobTemplateId": {
            "type": "string",
            "description": "Template Id."
          },
          "timezone": {
            "type": "string",
            "description": "Timezone."
          }
        },
        "required": [
          "name",
          "cron",
          "jobTemplateId",
          "timezone"
        ]
      },
      "UpdateScheduleRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provide name of result resource and automation itself."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "cron": {
            "type": "string",
            "description": "Cron for schedule."
          },
          "jobTemplateId": {
            "type": "string",
            "description": "Description."
          },
          "timezone": {
            "type": "string",
            "description": "Description."
          }
        }
      },
      "JobEventRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provide name of trigger."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "jobTemplateId": {
            "type": "string",
            "description": "Template Id."
          },
          "active": {
            "type": "boolean",
            "description": "Active."
          },
          "type": {
            "type": "string",
            "description": "Type must be one of FILE_DELETED,FILE_FINALIZED,FILE_ARCHIVED,SERVICE_ACCOUNT_CREATED,SERVICE_ACCOUNT_UPDATED,SERVICE_ACCOUNT_ACTIVATED,SERVICE_ACCOUNT_DEACTIVATED,SERVICE_ACCOUNT_RESTORED,SERVICE_ACCOUNT_DELETED,USER_CREATED,USER_UPDATED,USER_ACTIVATED,USER_DEACTIVATED,USER_RESTORED,USER_DELETED,ACCOUNT_API_KEY_CREATED,ACCOUNT_API_KEY_UPDATED,ACCOUNT_API_KEY_DELETED or starts with CUSTOM_*",
            "enum": [
              "FILE_DELETED",
              "FILE_FINALIZED",
              "FILE_ARCHIVED",
              "SERVICE_ACCOUNT_CREATED",
              "SERVICE_ACCOUNT_UPDATED",
              "SERVICE_ACCOUNT_ACTIVATED",
              "SERVICE_ACCOUNT_DEACTIVATED",
              "SERVICE_ACCOUNT_RESTORED",
              "SERVICE_ACCOUNT_DELETED",
              "USER_CREATED",
              "USER_UPDATED",
              "USER_ACTIVATED",
              "USER_DEACTIVATED",
              "USER_RESTORED",
              "USER_DELETED",
              "ACCOUNT_API_KEY_CREATED",
              "ACCOUNT_API_KEY_UPDATED",
              "ACCOUNT_API_KEY_DELETED"
            ]
          }
        },
        "required": [
          "name",
          "jobTemplateId"
        ]
      },
      "TriggerJobEventRequestDto": {
        "type": "object",
        "properties": {
          "inSeconds": {
            "type": "number",
            "description": "Trigger in seconds."
          },
          "message": {
            "type": "object",
            "description": "Message."
          }
        },
        "required": [
          "message"
        ]
      },
      "UpdateJobEventRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provide name of trigger."
          },
          "category": {
            "type": "string",
            "description": "Category."
          },
          "desc": {
            "type": "string",
            "description": "Description."
          },
          "jobTemplateId": {
            "type": "string",
            "description": "Template Id."
          },
          "type": {
            "type": "string",
            "description": "Type must be one of FILE_DELETED,FILE_FINALIZED,FILE_ARCHIVED,SERVICE_ACCOUNT_CREATED,SERVICE_ACCOUNT_UPDATED,SERVICE_ACCOUNT_ACTIVATED,SERVICE_ACCOUNT_DEACTIVATED,SERVICE_ACCOUNT_RESTORED,SERVICE_ACCOUNT_DELETED,USER_CREATED,USER_UPDATED,USER_ACTIVATED,USER_DEACTIVATED,USER_RESTORED,USER_DELETED,ACCOUNT_API_KEY_CREATED,ACCOUNT_API_KEY_UPDATED,ACCOUNT_API_KEY_DELETED or starts with CUSTOM_*",
            "enum": [
              "FILE_DELETED",
              "FILE_FINALIZED",
              "FILE_ARCHIVED",
              "SERVICE_ACCOUNT_CREATED",
              "SERVICE_ACCOUNT_UPDATED",
              "SERVICE_ACCOUNT_ACTIVATED",
              "SERVICE_ACCOUNT_DEACTIVATED",
              "SERVICE_ACCOUNT_RESTORED",
              "SERVICE_ACCOUNT_DELETED",
              "USER_CREATED",
              "USER_UPDATED",
              "USER_ACTIVATED",
              "USER_DEACTIVATED",
              "USER_RESTORED",
              "USER_DELETED",
              "ACCOUNT_API_KEY_CREATED",
              "ACCOUNT_API_KEY_UPDATED",
              "ACCOUNT_API_KEY_DELETED"
            ]
          },
          "version": {
            "type": "number",
            "description": "Version."
          }
        },
        "required": [
          "version"
        ]
      },
      "WebhookRequestDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "POST",
              "GET",
              "HEAD",
              "PUT",
              "DELETE",
              "PATCH",
              "OPTIONS"
            ]
          },
          "body": {
            "type": "object",
            "description": "Body."
          },
          "headers": {
            "type": "object",
            "description": "Headers."
          }
        },
        "required": [
          "url",
          "method"
        ]
      },
      "WebhookRequestDto": {
        "type": "object",
        "properties": {
          "customId": {
            "type": "string",
            "description": "Optional Id of webhook."
          },
          "saveDetails": {
            "type": "boolean",
            "description": "Save entire request."
          },
          "maxAttempts": {
            "type": "number",
            "description": "Max attempts."
          },
          "request": {
            "description": "Provide data",
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookRequestDetailsDto"
              }
            ]
          },
          "maskDetails": {
            "description": "Mask request details.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateMessageDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the message, max length 4096 characters."
          }
        },
        "required": [
          "content"
        ]
      },
      "InstanceConfigDto": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "description": "Version."
          },
          "versionComment": {
            "type": "string",
            "description": "Change comment"
          },
          "usersAllowApiKeysUsers": {
            "type": "boolean"
          },
          "usersAllowMailChange": {
            "type": "boolean"
          },
          "usersAllowPasswordLogin": {
            "type": "boolean"
          },
          "usersDisableEmailVerification": {
            "type": "boolean"
          },
          "eventsTriggerEvent": {
            "type": "boolean"
          },
          "eventsEncrypt": {
            "type": "boolean"
          },
          "eventsEncryptKey": {
            "type": "string"
          },
          "eventsTriggerFinalized": {
            "type": "boolean"
          },
          "eventsTriggerMetaUpdate": {
            "type": "boolean"
          },
          "eventsTriggerDelete": {
            "type": "boolean"
          },
          "eventTriggerUser": {
            "type": "string"
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usersAllowPasswordLoginIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disableSupport": {
            "type": "boolean"
          },
          "usersAutoEnabled": {
            "type": "boolean"
          },
          "usersAutoGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usersAutoRoleGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usersAutoProviders": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usersAutoData": {
            "type": "object"
          }
        },
        "required": [
          "version",
          "versionComment"
        ]
      }
    }
  }
}
